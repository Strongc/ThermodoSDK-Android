buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.8.+'
    }
}

apply plugin: 'android-library'

dependencies {

}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 19

        versionName VERSION
        versionCode System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER').toInteger() : 0
    }

    release {
        runProguard true
        proguardFile getDefaultProguardFile('proguard-android.txt')
        proguardFile file('proguard-rules.txt')
    }    

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
        }
    }
}

def outputFile = "${project.name}-${android.defaultConfig.versionName}-r${android.defaultConfig.versionCode}"

// Copies final .aar into build/dist folder
task copyAar(type: Copy, dependsOn: 'assembleRelease') {
    from file("build/libs/${project.name}.aar")
    into file('build/dist/')

    rename "${project.name}.aar", "${outputFile}.aar"
}

// Archives Proguard output files into build/dist/proguard.zip
task zipProguardMappings(type: Zip, dependsOn: 'assembleRelease') {
    from file('build/proguard/')
    archiveName 'proguard.zip'
    destinationDir file('build/dist')
}

// Extracts classes.jar from the final aar file. We need the jar to support Eclipse-based projects.
task extractClassesJar(type: Copy, dependsOn: 'assembleRelease') {
    from zipTree("build/libs/${project.name}.aar").matching { include 'classes.jar' }
    into file('build/dist/')
    rename 'classes.jar', "${outputFile}.jar"
}

// Defines the top-level task to invoke on the build server
task dist(type: Zip, dependsOn: ['zipProguardMappings', 'copyAar', 'extractClassesJar']) {
    description = 'Copies all release builds into the builds/dist folder.'
}
